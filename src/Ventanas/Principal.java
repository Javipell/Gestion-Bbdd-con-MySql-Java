
package Ventanas;

import ClasesTablas.Persona;
import Conexion.ConexionMySql;
import ListaArray.ListaPersona;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Javier Pellicena Email: javipell@gmail.com
 */
public class Principal extends javax.swing.JFrame {

    public ConexionMySql conexion;
    public static String bbddSeleccionada = "";
    public static String tablaSeleccionada = "";
    public static String[][] tiposCampos; 
    public static ResultSet listaDatos = null;
    public static int filaDatos = 0;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        // centra el formulario en la pantalla
        this.setLocationRelativeTo(this);
        jPanel1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblNombreBbdd = new javax.swing.JLabel();
        txtNombreBbdd = new javax.swing.JTextField();
        lblNombreTabla = new javax.swing.JLabel();
        txtNombreTabla = new javax.swing.JTextField();
        jLabelFondo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        jMenuAccesoBbdd = new javax.swing.JMenuItem();
        menuAbrirBbdd = new javax.swing.JMenuItem();
        jMenuGestion = new javax.swing.JMenu();
        jMenuTablas = new javax.swing.JMenuItem();
        jMenuItemListado = new javax.swing.JMenuItem();
        jMenuBuscar = new javax.swing.JMenuItem();
        jMenuAñadirRegistro2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuAñadirRegistro = new javax.swing.JMenuItem();
        jMenuItemListadoId = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuAcerca = new javax.swing.JMenuItem();
        menuSalir = new javax.swing.JMenu();
        jMenuSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Resultados de la Busqueda"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setShowGrid(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 640, 370));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 640, 380));

        lblNombreBbdd.setBackground(new java.awt.Color(0, 0, 153));
        lblNombreBbdd.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblNombreBbdd.setForeground(new java.awt.Color(255, 255, 255));
        lblNombreBbdd.setText("Nombre BBDD ");
        getContentPane().add(lblNombreBbdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, -1, -1));

        txtNombreBbdd.setBackground(new java.awt.Color(0, 0, 153));
        txtNombreBbdd.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        txtNombreBbdd.setForeground(new java.awt.Color(255, 255, 255));
        txtNombreBbdd.setText("NINGUNA");
        txtNombreBbdd.setEnabled(false);
        getContentPane().add(txtNombreBbdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 450, 160, -1));

        lblNombreTabla.setBackground(new java.awt.Color(0, 0, 153));
        lblNombreTabla.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblNombreTabla.setForeground(new java.awt.Color(255, 255, 255));
        lblNombreTabla.setText("Nombre Tabla ");
        getContentPane().add(lblNombreTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 450, -1, -1));

        txtNombreTabla.setBackground(new java.awt.Color(0, 0, 153));
        txtNombreTabla.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        txtNombreTabla.setForeground(new java.awt.Color(255, 255, 255));
        txtNombreTabla.setText("NINGUNA");
        txtNombreTabla.setEnabled(false);
        getContentPane().add(txtNombreTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 450, 160, -1));

        jLabelFondo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/azul.jpg"))); // NOI18N
        getContentPane().add(jLabelFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 480));

        jMenuBar1.setForeground(new java.awt.Color(0, 0, 204));
        jMenuBar1.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N

        menuArchivo.setText("Archivo");
        menuArchivo.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N

        jMenuAccesoBbdd.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuAccesoBbdd.setText("Acceso BBDD");
        jMenuAccesoBbdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAccesoBbddActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuAccesoBbdd);

        menuAbrirBbdd.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        menuAbrirBbdd.setText("Buscar Archivos");
        menuAbrirBbdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirBbddActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrirBbdd);

        jMenuBar1.add(menuArchivo);

        jMenuGestion.setText("Gestion");
        jMenuGestion.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N

        jMenuTablas.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuTablas.setText("Seleccionar Tabla");
        jMenuTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTablasActionPerformed(evt);
            }
        });
        jMenuGestion.add(jMenuTablas);

        jMenuItemListado.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuItemListado.setLabel("Listado Completo");
        jMenuItemListado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemListadoActionPerformed(evt);
            }
        });
        jMenuGestion.add(jMenuItemListado);

        jMenuBuscar.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuBuscar.setText("Buscar");
        jMenuBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuBuscarActionPerformed(evt);
            }
        });
        jMenuGestion.add(jMenuBuscar);

        jMenuAñadirRegistro2.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuAñadirRegistro2.setText("Añadir Registro");
        jMenuAñadirRegistro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAñadirRegistro2ActionPerformed(evt);
            }
        });
        jMenuGestion.add(jMenuAñadirRegistro2);
        jMenuGestion.add(jSeparator1);

        jMenuAñadirRegistro.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuAñadirRegistro.setText("Añadir Registro old");
        jMenuAñadirRegistro.setEnabled(false);
        jMenuAñadirRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAñadirRegistroActionPerformed(evt);
            }
        });
        jMenuGestion.add(jMenuAñadirRegistro);

        jMenuItemListadoId.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuItemListadoId.setText("Listado por  Id");
        jMenuItemListadoId.setEnabled(false);
        jMenuItemListadoId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemListadoIdActionPerformed(evt);
            }
        });
        jMenuGestion.add(jMenuItemListadoId);

        jMenuBar1.add(jMenuGestion);

        jMenu1.setText("Acerca de");
        jMenu1.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N

        jMenuAcerca.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuAcerca.setText("Acerca de");
        jMenuAcerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAcercaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuAcerca);

        jMenuBar1.add(jMenu1);

        menuSalir.setText("Salir");
        menuSalir.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N

        jMenuSalir.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        jMenuSalir.setText("Salir");
        jMenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSalirActionPerformed(evt);
            }
        });
        menuSalir.add(jMenuSalir);

        jMenuBar1.add(menuSalir);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo menuAbrirBbddActionPerformed Abre un explorador de archivos y
     * guarda la ruta y el nombre del archivo seleccionado
     *
     * @param evt
     */

    private void menuAbrirBbddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirBbddActionPerformed

        // miFichero.EjemploJFileChooser(); 
        JFileChooser jf = new JFileChooser();
        int opcion = jf.showOpenDialog(this);
        // para crear filtros de archivos
        FileNameExtensionFilter fitroArchivos = new FileNameExtensionFilter("Archivos BBDD", "mdb");
        jf.setFileFilter(fitroArchivos);

        if (opcion == JFileChooser.APPROVE_OPTION) {
            // obtener el nombre del archivo
            String nombreArchivo = jf.getSelectedFile().getName();
            String rutaArchivo = jf.getSelectedFile().toString();
            System.out.println("ruta archivo " + rutaArchivo);
            System.out.println("nombre archivo " + nombreArchivo);
        }

    }//GEN-LAST:event_menuAbrirBbddActionPerformed

    private void jMenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuSalirActionPerformed

    private void jMenuAccesoBbddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAccesoBbddActionPerformed
        AccesoBbdd frmAcceso = new AccesoBbdd();
        frmAcceso.setVisible(true);
    }//GEN-LAST:event_jMenuAccesoBbddActionPerformed

    private void jMenuItemListadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemListadoActionPerformed

        String sql = "SELECT * FROM " + tablaSeleccionada;
        listaDatos(sql);
    }//GEN-LAST:event_jMenuItemListadoActionPerformed
    
    /**
     * Metodo jMenuItemListadoIdActionPerformed
     * ** obsoleto utilizar el metodo jMenuBuscarActionPerformed
     * @param evt 
     */
    private void jMenuItemListadoIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemListadoIdActionPerformed

        ListaPersona lista = new ListaPersona();
        Persona p = new Persona();
        int id = 0;
        String respuesta = JOptionPane.showInputDialog(null,
                "Introduzca el Identificador que desea buscar \n");
        codigo:
        {
            if (respuesta.equals("")) {
                JOptionPane.showMessageDialog(null, "Debe introducir un numero",
                        "Valor incorrecto", JOptionPane.ERROR_MESSAGE);
                break codigo;
            }

            try {
                id = Integer.parseInt(respuesta);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Debe introducir un numero",
                        "Valor incorrecto", JOptionPane.ERROR_MESSAGE);
                break codigo;
            }

            ArrayList<Persona> listaPersona = lista.listadoRegistro(id);
            int numeroRegistros = listaPersona.size();
            jPanel1.setVisible(true);
            // creamos un objeto para guardar los nombres de las columnas
            Object[] columnas = {"IdPersona", "Nombre", "Edad", "Profesion", "Telefono"};
            // creamos un objeto array bidimensional para guardar los registro
            Object[][] filas = new Object[numeroRegistros][columnas.length];

            if (listaPersona.size() > 0) {
                for (int i = 0; i < listaPersona.size(); i++) {
                    p = listaPersona.get(i);
                    filas[i][0] = p.getIdPersona();
                    filas[i][1] = p.getNombrePersona();
                    filas[i][2] = p.getEdadPersona();
                    filas[i][3] = p.getProfesionPersona();
                    filas[i][4] = p.getTelefonoPersona();
                }
                JTable table = new JTable(filas, columnas);
                jScrollPane1.setViewportView(table);
            } else {
                JOptionPane.showMessageDialog(null, "Actualmente no existen registros de personas",
                        "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
                jPanel1.setVisible(true);
            }

        }
    }//GEN-LAST:event_jMenuItemListadoIdActionPerformed

    private void jMenuAñadirRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAñadirRegistroActionPerformed

        jPanel1.setVisible(false);
        if (creaConexion() == true) {
            Persona p = new Persona();
            ListaPersona lista = new ListaPersona();

            String mensaje = "Introduce \n\n";
            //String[] datosSolicitados = {"Identificador", "Nombre", "Edad", "Profesion", "Telefono"};
            ArrayList datosSolicitados = conexion.getNombreCampos();
            String[] datosRecogidos = new String[ datosSolicitados.size() ];

            for (int i = 0; i < datosSolicitados.size(); i++) 
            {
                datosRecogidos[i] = JOptionPane.showInputDialog(null,
                        (mensaje + datosSolicitados.get(i)) + " : \n");
            }

            int b = 0;
            p.setIdPersona(Integer.parseInt( datosRecogidos[b++] ) );
            p.setNombrePersona( datosRecogidos[b++] );
            p.setEdadPersona(Integer.parseInt( datosRecogidos[b++] ) );
            p.setProfesionPersona( datosRecogidos[b++] );
            p.setTelefonoPersona( datosRecogidos[b++] );
            p.setCasadoPersona(Boolean.valueOf( datosRecogidos[b++] ) );

            conexion.registrarElena(p);
        } else {
            JOptionPane.showMessageDialog(null, "No se ha podido realizar la conexion");
        }

    }//GEN-LAST:event_jMenuAñadirRegistroActionPerformed

    private void jMenuAñadirRegistro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAñadirRegistro2ActionPerformed

        jPanel1.setVisible(false);
        if (creaConexion() == true) 
        {
            conexion.obtieneNombresCampos( tablaSeleccionada );
            conexion.obtenerNombresColumnas(bbddSeleccionada, tablaSeleccionada);
            HashMap hm = conexion.getNombreCamposTipos();
            System.out.println("bbddSeleccionada: " + bbddSeleccionada 
                    + "\ntablaseleccionada: " + tablaSeleccionada
                    + "\nlogitud hm: "+ hm.size());

            
            //Persona p = new Persona();
            ListaPersona lista = new ListaPersona();

            String mensaje = "Introduce \n\n";
            //String[] datosSolicitados = {"Identificador", "Nombre", "Edad", "Profesion", "Telefono"};
            
            ArrayList datosSolicitados = conexion.getNombreCampos();
            
            String[] datosRecogidos = new String[ datosSolicitados.size() ];
            
            creaArrayCamposTipos();

            String sql = "INSERT INTO " + tablaSeleccionada 
                    + " VALUES (";

            for (int i = 0; i < datosSolicitados.size(); i++) 
            {
                datosRecogidos[i] = JOptionPane.showInputDialog(null,
                        (mensaje + datosSolicitados.get(i))  + " : \n");
                //System.out.println("3 campo ("+i+")"+ tiposCampos[i][0]+" - "+tiposCampos[i][1]);
                if (tiposCampos[i][1]!="TINYINT") 
                {
                    sql += (i<datosSolicitados.size()-1) 
                            ? "'"+datosRecogidos[i]+"', " 
                            : "'"+datosRecogidos[i]+"' ";
                }
                else
                {
                    System.out.println("es tinyint");
                    System.out.println("3 campo ("+i+")"+ tiposCampos[i][0]+" - "+tiposCampos[i][1]);

                    sql += (i==datosSolicitados.size()) 
                            ? "" + datosRecogidos[i]+", " 
                            : "" + datosRecogidos[i]+" " ;
                }
            }
            sql += " )";
            System.out.println("SQL añadir registro2 : " + sql);

            /*int b = 0;
            p.setIdPersona(Integer.parseInt(datosRecogidos[b++]));
            p.setNombrePersona(datosRecogidos[b++]);
            p.setEdadPersona(Integer.parseInt(datosRecogidos[b++]));
            p.setProfesionPersona(datosRecogidos[b++]);
            p.setTelefonoPersona(datosRecogidos[b++]);
            p.setCasadoPersona(Boolean.valueOf( datosRecogidos[b++] ) );

            String sql = "INSERT INTO persona VALUES ( '" + p.getIdPersona()
                    + "', '" + p.getNombrePersona()
                    + "', '" + p.getEdadPersona()
                    + "', '" + p.getProfesionPersona()
                    + "', '" + p.getTelefonoPersona() 
                    + "', " + p.getCasadoPersona()
                    + " )";
            System.out.println("sql "+sql);*/
            
            

            conexion.modificaRegistros(sql);

        } else {
            JOptionPane.showMessageDialog(null, "No se ha podido realizar la conexion");
        }
    }//GEN-LAST:event_jMenuAñadirRegistro2ActionPerformed

    private void jMenuBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuBuscarActionPerformed

        jPanel1.setVisible(false);
        String sql ="";
        int seleccion =0 ;
        String cadena = "Seleccione el dato que desea buscar \n";

        String respuesta ="";
        
        if (creaConexion() == true) 
        {
            conexion.obtieneNombresCampos( tablaSeleccionada );
            // guardo en un arralist los nombres de los campos de la tabla
            ArrayList datosSolicitados = conexion.getNombreCampos() ;

            for (int i = 0; i < datosSolicitados.size(); i++) {
                cadena += "\n " + (i + 1) + ".- " + datosSolicitados.get(i);
            }
            respuesta = JOptionPane.showInputDialog(null, cadena, "Seleccione una opcion", 
                    JOptionPane.OK_CANCEL_OPTION);
            codigo:
            {
                if (respuesta == null) 
                {
                    mensajeError();
                    break codigo;
                } 
                else 
                {
                    try
                    {
                    seleccion = Integer.parseInt(respuesta) - 1;
                    if (seleccion < 0 || seleccion > datosSolicitados.size()) 
                    {
                        mensajeError();
                        break codigo;
                    }
                    cadena = "Introduzca el dato \n"
                            + datosSolicitados.get(seleccion);
                    respuesta = JOptionPane.showInputDialog(null, cadena);
                    }
                    catch (Exception Ex)
                    {
                        mensajeError();
                    }
                    
                    sql = "SELECT * FROM " + tablaSeleccionada + " WHERE "
                            + datosSolicitados.get(seleccion) + " LIKE '%" + respuesta + "%' ";
                    
                    listaDatos(sql);
                }
            }
        }
    }//GEN-LAST:event_jMenuBuscarActionPerformed

    private void jMenuTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTablasActionPerformed
        // TODO add your handling code here:
        
        if ( creaConexion() )
        {
            Tablas frmTablas = new Tablas();
            frmTablas.setVisible(true);
        }
    }//GEN-LAST:event_jMenuTablasActionPerformed

    private void jMenuAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAcercaActionPerformed
        
        Acerca frmAcerca = new Acerca();
        frmAcerca.setVisible(true);
    }//GEN-LAST:event_jMenuAcercaActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.rowAtPoint(evt.getPoint());
        int col = jTable1.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) 
        {
            //JOptionPane.showMessageDialog(null, "selecciono row: "+ row );
            filaDatos = row;
            if (creaConexion())
            {            
                conexion.obtieneNombresCampos( tablaSeleccionada );
                conexion.obtenerNombresColumnas(bbddSeleccionada, tablaSeleccionada);

                AccesoBbdd.conexion2 = conexion;

                Modificar frmModificar = null;
                try 
                {
                    frmModificar = new Modificar();
                } 
                catch (SQLException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                jTable1.setVisible(false);
                frmModificar.setVisible(true);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * Metodo listadDatos
     * comprueba que existe una conexion, recibe los datos de la consulta
     * en la clase ListaPersona y el metodo ListadoTodosRegistros
     * @param sql tipo string Representa la consulta a realizar 
     */
    public void listaDatos(String sql)
    {
        if (creaConexion() == true) 
        {
            conexion.obtieneNombresCampos( tablaSeleccionada );
            
            ListaPersona lista = new ListaPersona();
            // recibe los datos de la consulta sql
            ResultSet listaPersona = lista.listadoTodosRegistros(sql);
            // guardo los datos de la consulta en esta variable public static
            listaDatos = listaPersona;
            
            int numeroRegistros = 0;
            
            // calcula el numero de registros devueltos por la consulta
            try 
            {
                listaPersona.last(); // va al ultimo registro
                numeroRegistros = listaPersona.getRow();
                listaPersona.beforeFirst(); // vuelve al primero
            } 
            catch (SQLException ex) 
            {
                System.out.println("Error en el conteo. \n" +ex.getMessage());
            }
            
            jPanel1.setVisible(true);
            
            // guardo en un arralist los nombres de los campos de la tabla
            ArrayList datosSolicitados = conexion.getNombreCampos() ;
            // creamos un objeto para guardar los nombres de las columnas
            //Object[] columnas = {"IdPersona", "Nombre", "Edad", "Profesion", "Telefono"};
            Object[] columnas = new Object[datosSolicitados.size()];
            // pasamos los nombres de los campos a las columnas de la tabla
            for (int i = 0; i < datosSolicitados.size(); i++) 
            {
                columnas[i] = datosSolicitados.get(i);
            }
            
            // creamos un objeto array bidimensional para guardar los registro
            Object[][] filas = new Object[numeroRegistros][columnas.length];
 
            int j = 0; // numero de fila donde guardar el registro
            if (numeroRegistros > 0) 
            {
                try 
                {
                    while (listaPersona.next())
                    {
                        // recorre los campos de cada registro
                        for (int k = 0; k < datosSolicitados.size() ; k++) 
                        {
                            // añade en la columna y campo el valor que hay en la consulta
                            filas[j][k] =  listaPersona.getString(k+1);
                        }
                        j++; // incrementa la fila
                    }
                } catch (SQLException ex) 
                {
                    System.out.println("Error en el Metodo listadoDatos \n" 
                            + ex.getMessage());
                }

                //JTable table = new JTable(filas, columnas);
                jTable1 = new JTable(filas, columnas);
                //jScrollPane1.setViewportView(table);
                jScrollPane1.setViewportView(jTable1);
                // creo un envento de raton sobre la tabla
                jTable1.addMouseListener(new java.awt.event.MouseAdapter() 
                {
                    public void mouseClicked(java.awt.event.MouseEvent evt) 
                    {
                        jTable1MouseClicked(evt);
                    }
                });
                
            } else {
                JOptionPane.showMessageDialog(null, "Actualmente no existen registros" 
                        + "\nTabla seleccionada: " + tablaSeleccionada,
                        "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
                jPanel1.setVisible(false);
            }
        }
    }
    
    /**
     * Metodo listadoDatos_old
     * *********************************************
     * *** metodo obsoleto, solo vale para una clase
     * *********************************************
     * @param sql tipo string Consulta a ejecutar
     */
    public void listaDatos_old(String sql)
    {
        if (creaConexion() == true) 
        {
            conexion.obtieneNombresCampos( tablaSeleccionada );
            ListaPersona lista = new ListaPersona();
            // crea una instancia de la clase persona
            Persona p = new Persona();
            // guarda los datos recibidos de la consulta en el ArrayList de la clase Persona
            ArrayList<Persona> listaPersona = lista.listadoTodosRegistros_old(sql);
            int numeroRegistros = listaPersona.size();

            jPanel1.setVisible(true);
            // guardo en un arralist los nombres de los campos de la tabla
            ArrayList datosSolicitados = conexion.getNombreCampos() ;
            // creamos un objeto para guardar los nombres de las columnas
            //Object[] columnas = {"IdPersona", "Nombre", "Edad", "Profesion", "Telefono"};
            Object[] columnas = new Object[datosSolicitados.size()];
            for (int i = 0; i < datosSolicitados.size(); i++) 
            {
                columnas[i] = datosSolicitados.get(i);
            }
            
            // creamos un objeto array bidimensional para guardar los registro
            Object[][] filas = new Object[numeroRegistros][columnas.length];
            //
            // OBJETIVO CAMBIAR ESTE SISTEMA POR OTRO QUE SIRVA PARA CUALQUIER TABLA
            //

            if (listaPersona.size() > 0) {
                for (int i = 0; i < listaPersona.size(); i++) {
                    p = listaPersona.get(i);
                    filas[i][0] = p.getIdPersona();
                    filas[i][1] = p.getNombrePersona();
                    filas[i][2] = p.getEdadPersona();
                    filas[i][3] = p.getProfesionPersona();
                    filas[i][4] = p.getTelefonoPersona();
                }
                JTable table = new JTable(filas, columnas);
                jScrollPane1.setViewportView(table);
            } else {
                JOptionPane.showMessageDialog(null, "Actualmente no existen registros" 
                        + "\nTabla seleccionada: " + tablaSeleccionada,
                        "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
                jPanel1.setVisible(false);
            }
        }
    }
    
    public void mensajeError()
    {
        JOptionPane.showMessageDialog(null, "Introduzca el dato solicitado.", 
                "Datos Erroneos", JOptionPane.ERROR_MESSAGE);
    }
    
    
    public Boolean creaConexion()
    {
        Boolean respuesta = false;

        try
        {
            if ( !"".equals(AccesoBbdd.txtBaseDatos.getText()) 
                    && AccesoBbdd.txtBaseDatos.getText() != null
                    && !"".equals(AccesoBbdd.txtUsuario.getText())
                    && AccesoBbdd.txtUsuario.getText() != null)
            {
                // creo una conexion con los valores ocultos del formulario principal
                conexion = new ConexionMySql(AccesoBbdd.txtBaseDatos.getText(),
                        AccesoBbdd.txtUsuario.getText(), 
                        String.valueOf( AccesoBbdd.txtContraseña.getPassword() ) );
                if ( ConexionMySql.errorConexion.equals("") )
                {
                    int valor = conexion.getNombreTablas().size();
                    if (valor>0)
                    {
                        if (!"".equals(tablaSeleccionada))
                        {
                            respuesta = true;
                        } 
                        else
                        {
                            Tablas frmTablas = new Tablas();
                            frmTablas.setVisible(true);
                        }
                    } 
                    else
                    {
                        JOptionPane.showMessageDialog(null, "No hay tablas en esta base de datos");
                    }
                } else{
                    JOptionPane.showMessageDialog(null, "Error: " + ConexionMySql.errorConexion);
                }
            }
        } 
        catch (Exception ex)
        {
              JOptionPane.showMessageDialog(null, "Debe introducir al menos "
                      + "una Bbdd y un usuario.\n\n Menu : Archivo - Acceso Bbdd", "Valores nulos", 
                      JOptionPane.ERROR_MESSAGE);
        }
        return respuesta;
    }
    
    public void creaArrayCamposTipos()
    {
        // 2a forma de recorrer el HashMap
        HashMap hm = conexion.getNombreCamposTipos();
        tiposCampos = new String[hm.size()][2];
        
        Iterator iterador = conexion.getNombreCamposTipos().entrySet().iterator();
        Map.Entry campos2;
        System.out.println("tamaño del iterator "+hm.size() );
        int i  = 0;
        
        while (iterador.hasNext()) 
        {
            campos2 = (Map.Entry) iterador.next();
            String nomCampo = String.valueOf( campos2.getKey() ) ;
            String tipCampo = String.valueOf( campos2.getValue() ) ;
            tiposCampos[i][0] = nomCampo;
            tiposCampos[i][1] = tipCampo;
            System.out.println(""+i+" campo "+ tiposCampos[i][0]+" - "+tiposCampos[i][1]);
            i++;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelFondo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuAccesoBbdd;
    private javax.swing.JMenuItem jMenuAcerca;
    private javax.swing.JMenuItem jMenuAñadirRegistro;
    private javax.swing.JMenuItem jMenuAñadirRegistro2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuBuscar;
    private javax.swing.JMenu jMenuGestion;
    private javax.swing.JMenuItem jMenuItemListado;
    private javax.swing.JMenuItem jMenuItemListadoId;
    private javax.swing.JMenuItem jMenuSalir;
    private javax.swing.JMenuItem jMenuTablas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblNombreBbdd;
    private javax.swing.JLabel lblNombreTabla;
    private javax.swing.JMenuItem menuAbrirBbdd;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuSalir;
    public static javax.swing.JTextField txtNombreBbdd;
    public static javax.swing.JTextField txtNombreTabla;
    // End of variables declaration//GEN-END:variables
}
